# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-29T02:35:53+00:00

from __future__ import annotations

from enum import Enum
from typing import Any, Dict, List, Optional

from pydantic import BaseModel, Field, RootModel


class AgeRange(Enum):
    AGE_RANGE_UNSPECIFIED = 'AGE_RANGE_UNSPECIFIED'
    LESS_THAN_EIGHTEEN = 'LESS_THAN_EIGHTEEN'
    EIGHTEEN_TO_TWENTY = 'EIGHTEEN_TO_TWENTY'
    TWENTY_ONE_OR_OLDER = 'TWENTY_ONE_OR_OLDER'


class Source(Enum):
    READ_SOURCE_TYPE_UNSPECIFIED = 'READ_SOURCE_TYPE_UNSPECIFIED'
    READ_SOURCE_TYPE_PROFILE = 'READ_SOURCE_TYPE_PROFILE'
    READ_SOURCE_TYPE_CONTACT = 'READ_SOURCE_TYPE_CONTACT'
    READ_SOURCE_TYPE_DOMAIN_CONTACT = 'READ_SOURCE_TYPE_DOMAIN_CONTACT'


class BatchDeleteContactsRequest(BaseModel):
    resourceNames: Optional[List[str]] = Field(
        None,
        description="Required. The resource names of the contact to delete. It's repeatable. Allows up to 500 resource names in a single request.",
    )


class ContentType(Enum):
    CONTENT_TYPE_UNSPECIFIED = 'CONTENT_TYPE_UNSPECIFIED'
    TEXT_PLAIN = 'TEXT_PLAIN'
    TEXT_HTML = 'TEXT_HTML'


class GroupType(Enum):
    GROUP_TYPE_UNSPECIFIED = 'GROUP_TYPE_UNSPECIFIED'
    USER_CONTACT_GROUP = 'USER_CONTACT_GROUP'
    SYSTEM_CONTACT_GROUP = 'SYSTEM_CONTACT_GROUP'


class ContactGroupMembership(BaseModel):
    contactGroupId: Optional[str] = Field(
        None,
        description='Output only. The contact group ID for the contact group membership.',
    )
    contactGroupResourceName: Optional[str] = Field(
        None,
        description='The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`. Only contact_group_resource_name can be used for modifying memberships. Any contact group membership can be removed, but only user group or "myContacts" or "starred" system groups memberships can be added. A contact must always have at least one contact group membership.',
    )


class ContactGroupMetadata(BaseModel):
    deleted: Optional[bool] = Field(
        None,
        description='Output only. True if the contact group resource has been deleted. Populated only for [`ListContactGroups`](/people/api/rest/v1/contactgroups/list) requests that include a sync token.',
    )
    updateTime: Optional[str] = Field(
        None, description='Output only. The time the group was last updated.'
    )


class CopyOtherContactToMyContactsGroupRequest(BaseModel):
    copyMask: Optional[str] = Field(
        None,
        description='Required. A field mask to restrict which fields are copied into the new contact. Valid values are: * emailAddresses * names * phoneNumbers',
    )
    readMask: Optional[str] = Field(
        None,
        description='Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to the copy mask with metadata and membership fields if not set. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined',
    )
    sources: Optional[List[Source]] = Field(
        None,
        description='Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.',
    )


class Date(BaseModel):
    day: Optional[int] = Field(
        None,
        description="Day of a month. Must be from 1 to 31 and valid for the year and month, or 0 to specify a year by itself or a year and month where the day isn't significant.",
    )
    month: Optional[int] = Field(
        None,
        description='Month of a year. Must be from 1 to 12, or 0 to specify a year without a month and day.',
    )
    year: Optional[int] = Field(
        None,
        description='Year of the date. Must be from 1 to 9999, or 0 to specify a date without a year.',
    )


class DomainMembership(BaseModel):
    inViewerDomain: Optional[bool] = Field(
        None,
        description="True if the person is in the viewer's Google Workspace domain.",
    )


class Empty(BaseModel):
    pass


class GroupClientData(BaseModel):
    key: Optional[str] = Field(
        None, description='The client specified key of the client data.'
    )
    value: Optional[str] = Field(
        None, description='The client specified value of the client data.'
    )


class Type(Enum):
    TYPE_UNSPECIFIED = 'TYPE_UNSPECIFIED'
    OUTLOOK_BILLING_INFORMATION = 'OUTLOOK_BILLING_INFORMATION'
    OUTLOOK_DIRECTORY_SERVER = 'OUTLOOK_DIRECTORY_SERVER'
    OUTLOOK_KEYWORD = 'OUTLOOK_KEYWORD'
    OUTLOOK_MILEAGE = 'OUTLOOK_MILEAGE'
    OUTLOOK_PRIORITY = 'OUTLOOK_PRIORITY'
    OUTLOOK_SENSITIVITY = 'OUTLOOK_SENSITIVITY'
    OUTLOOK_SUBJECT = 'OUTLOOK_SUBJECT'
    OUTLOOK_USER = 'OUTLOOK_USER'
    HOME = 'HOME'
    WORK = 'WORK'
    OTHER = 'OTHER'


class ModifyContactGroupMembersRequest(BaseModel):
    resourceNamesToAdd: Optional[List[str]] = Field(
        None,
        description='Optional. The resource names of the contact people to add in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000.',
    )
    resourceNamesToRemove: Optional[List[str]] = Field(
        None,
        description='Optional. The resource names of the contact people to remove in the form of `people/{person_id}`. The total number of resource names in `resource_names_to_add` and `resource_names_to_remove` must be less than or equal to 1000.',
    )


class ModifyContactGroupMembersResponse(BaseModel):
    canNotRemoveLastContactGroupResourceNames: Optional[List[str]] = Field(
        None,
        description='The contact people resource names that cannot be removed from their last contact group.',
    )
    notFoundResourceNames: Optional[List[str]] = Field(
        None, description='The contact people resource names that were not found.'
    )


class Type1(Enum):
    DEFAULT = 'DEFAULT'
    MAIDEN_NAME = 'MAIDEN_NAME'
    INITIALS = 'INITIALS'
    GPLUS = 'GPLUS'
    OTHER_NAME = 'OTHER_NAME'
    ALTERNATE_NAME = 'ALTERNATE_NAME'
    SHORT_NAME = 'SHORT_NAME'


class ObjectType(Enum):
    OBJECT_TYPE_UNSPECIFIED = 'OBJECT_TYPE_UNSPECIFIED'
    PERSON = 'PERSON'
    PAGE = 'PAGE'


class UserType(Enum):
    USER_TYPE_UNKNOWN = 'USER_TYPE_UNKNOWN'
    GOOGLE_USER = 'GOOGLE_USER'
    GPLUS_USER = 'GPLUS_USER'
    GOOGLE_APPS_USER = 'GOOGLE_APPS_USER'


class ProfileMetadata(BaseModel):
    objectType: Optional[ObjectType] = Field(
        None, description='Output only. The profile object type.'
    )
    userTypes: Optional[List[UserType]] = Field(
        None, description='Output only. The user types.'
    )


class Type2(Enum):
    SOURCE_TYPE_UNSPECIFIED = 'SOURCE_TYPE_UNSPECIFIED'
    ACCOUNT = 'ACCOUNT'
    PROFILE = 'PROFILE'
    DOMAIN_PROFILE = 'DOMAIN_PROFILE'
    CONTACT = 'CONTACT'
    OTHER_CONTACT = 'OTHER_CONTACT'
    DOMAIN_CONTACT = 'DOMAIN_CONTACT'


class SourceModel(BaseModel):
    etag: Optional[str] = Field(
        None,
        description='**Only populated in `person.metadata.sources`.** The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the source. Used for web cache validation.',
    )
    id: Optional[str] = Field(
        None,
        description='The unique identifier within the source type generated by the server.',
    )
    profileMetadata: Optional[ProfileMetadata] = Field(
        None,
        description='Output only. **Only populated in `person.metadata.sources`.** Metadata about a source of type PROFILE.',
    )
    type: Optional[Type2] = Field(None, description='The source type.')
    updateTime: Optional[str] = Field(
        None,
        description='Output only. **Only populated in `person.metadata.sources`.** Last update timestamp of this source.',
    )


class Status(BaseModel):
    code: Optional[int] = Field(
        None,
        description='The status code, which should be an enum value of google.rpc.Code.',
    )
    details: Optional[List[Dict[str, Any]]] = Field(
        None,
        description='A list of messages that carry the error details. There is a common set of message types for APIs to use.',
    )
    message: Optional[str] = Field(
        None,
        description='A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the google.rpc.Status.details field, or localized by the client.',
    )


class Source3(Enum):
    READ_SOURCE_TYPE_UNSPECIFIED = 'READ_SOURCE_TYPE_UNSPECIFIED'
    READ_SOURCE_TYPE_PROFILE = 'READ_SOURCE_TYPE_PROFILE'
    READ_SOURCE_TYPE_CONTACT = 'READ_SOURCE_TYPE_CONTACT'
    READ_SOURCE_TYPE_DOMAIN_CONTACT = 'READ_SOURCE_TYPE_DOMAIN_CONTACT'


class UpdateContactPhotoRequest(BaseModel):
    personFields: Optional[str] = Field(
        None,
        description='Optional. A field mask to restrict which fields on the person are returned. Multiple fields can be specified by separating them with commas. Defaults to empty if not set, which will skip the post mutate get. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined',
    )
    photoBytes: Optional[str] = Field(None, description='Required. Raw photo bytes')
    sources: Optional[List[Source3]] = Field(
        None,
        description='Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.',
    )


class FieldXgafv(Enum):
    field_1 = '1'
    field_2 = '2'


class Alt(Enum):
    json = 'json'
    media = 'media'
    proto = 'proto'


class ResourceNames(RootModel[List[str]]):
    root: List[str]


class Sources(RootModel[List[Source3]]):
    root: List[Source3]


class Sources1(RootModel[List[Source3]]):
    root: List[Source3]


class Sources2(RootModel[List[Source3]]):
    root: List[Source3]


class MergeSource(Enum):
    DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED = 'DIRECTORY_MERGE_SOURCE_TYPE_UNSPECIFIED'
    DIRECTORY_MERGE_SOURCE_TYPE_CONTACT = 'DIRECTORY_MERGE_SOURCE_TYPE_CONTACT'


class Source10(Enum):
    DIRECTORY_SOURCE_TYPE_UNSPECIFIED = 'DIRECTORY_SOURCE_TYPE_UNSPECIFIED'
    DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT = 'DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT'
    DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE = 'DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE'


class MergeSources(RootModel[List[MergeSource]]):
    root: List[MergeSource]


class Sources3(RootModel[List[Source10]]):
    root: List[Source10]


class Source12(Enum):
    READ_SOURCE_TYPE_UNSPECIFIED = 'READ_SOURCE_TYPE_UNSPECIFIED'
    READ_SOURCE_TYPE_PROFILE = 'READ_SOURCE_TYPE_PROFILE'
    READ_SOURCE_TYPE_CONTACT = 'READ_SOURCE_TYPE_CONTACT'
    READ_SOURCE_TYPE_DOMAIN_CONTACT = 'READ_SOURCE_TYPE_DOMAIN_CONTACT'


class Sources4(RootModel[List[Source12]]):
    root: List[Source12]


class Source14(Enum):
    DIRECTORY_SOURCE_TYPE_UNSPECIFIED = 'DIRECTORY_SOURCE_TYPE_UNSPECIFIED'
    DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT = 'DIRECTORY_SOURCE_TYPE_DOMAIN_CONTACT'
    DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE = 'DIRECTORY_SOURCE_TYPE_DOMAIN_PROFILE'


class MergeSources1(RootModel[List[MergeSource]]):
    root: List[MergeSource]


class Sources5(RootModel[List[Source14]]):
    root: List[Source14]


class Source16(Enum):
    READ_SOURCE_TYPE_UNSPECIFIED = 'READ_SOURCE_TYPE_UNSPECIFIED'
    READ_SOURCE_TYPE_PROFILE = 'READ_SOURCE_TYPE_PROFILE'
    READ_SOURCE_TYPE_CONTACT = 'READ_SOURCE_TYPE_CONTACT'
    READ_SOURCE_TYPE_DOMAIN_CONTACT = 'READ_SOURCE_TYPE_DOMAIN_CONTACT'


class Sources6(RootModel[List[Source16]]):
    root: List[Source16]


class SortOrder(Enum):
    LAST_MODIFIED_ASCENDING = 'LAST_MODIFIED_ASCENDING'
    LAST_MODIFIED_DESCENDING = 'LAST_MODIFIED_DESCENDING'
    FIRST_NAME_ASCENDING = 'FIRST_NAME_ASCENDING'
    LAST_NAME_ASCENDING = 'LAST_NAME_ASCENDING'


class Sources7(RootModel[List[Source16]]):
    root: List[Source16]


class Sources8(RootModel[List[Source16]]):
    root: List[Source16]


class Sources9(RootModel[List[Source16]]):
    root: List[Source16]


class ContactGroup(BaseModel):
    clientData: Optional[List[GroupClientData]] = Field(
        None, description="The group's client data."
    )
    etag: Optional[str] = Field(
        None,
        description='The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.',
    )
    formattedName: Optional[str] = Field(
        None,
        description="Output only. The name translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale for system groups names. Group names set by the owner are the same as name.",
    )
    groupType: Optional[GroupType] = Field(
        None, description='Output only. The contact group type.'
    )
    memberCount: Optional[int] = Field(
        None,
        description='Output only. The total number of contacts in the group irrespective of max members in specified in the request.',
    )
    memberResourceNames: Optional[List[str]] = Field(
        None,
        description='Output only. The list of contact person resource names that are members of the contact group. The field is only populated for GET requests and will only return as many members as `maxMembers` in the get request.',
    )
    metadata: Optional[ContactGroupMetadata] = Field(
        None, description='Output only. Metadata about the contact group.'
    )
    name: Optional[str] = Field(
        None,
        description='The contact group name set by the group owner or a system provided name for system groups. For [`contactGroups.create`](/people/api/rest/v1/contactGroups/create) or [`contactGroups.update`](/people/api/rest/v1/contactGroups/update) the name must be unique to the users contact groups. Attempting to create a group with a duplicate name will return a HTTP 409 error.',
    )
    resourceName: Optional[str] = Field(
        None,
        description='The resource name for the contact group, assigned by the server. An ASCII string, in the form of `contactGroups/{contact_group_id}`.',
    )


class ContactGroupResponse(BaseModel):
    contactGroup: Optional[ContactGroup] = Field(None, description='The contact group.')
    requestedResourceName: Optional[str] = Field(
        None, description='The original requested resource name.'
    )
    status: Optional[Status] = Field(None, description='The status of the response.')


class CreateContactGroupRequest(BaseModel):
    contactGroup: Optional[ContactGroup] = Field(
        None, description='Required. The contact group to create.'
    )
    readGroupFields: Optional[str] = Field(
        None,
        description='Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * metadata * name',
    )


class FieldMetadata(BaseModel):
    primary: Optional[bool] = Field(
        None,
        description='Output only. True if the field is the primary field for all sources in the person. Each person will have at most one field with `primary` set to true.',
    )
    source: Optional[SourceModel] = Field(None, description='The source of the field.')
    sourcePrimary: Optional[bool] = Field(
        None,
        description='True if the field is the primary field for the source. Each source must have at most one field with `source_primary` set to true.',
    )
    verified: Optional[bool] = Field(
        None,
        description='Output only. True if the field is verified; false if the field is unverified. A verified field is typically a name, email address, phone number, or website that has been confirmed to be owned by the person.',
    )


class FileAs(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the file-as.'
    )
    value: Optional[str] = Field(None, description='The file-as value')


class Gender(BaseModel):
    addressMeAs: Optional[str] = Field(
        None,
        description='Free form text field for pronouns that should be used to address the person. Common values are: * `he`/`him` * `she`/`her` * `they`/`them`',
    )
    formattedValue: Optional[str] = Field(
        None,
        description="Output only. The value of the gender translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale. Unspecified or custom value are not localized.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the gender.'
    )
    value: Optional[str] = Field(
        None,
        description='The gender for the person. The gender can be custom or one of these predefined values: * `male` * `female` * `unspecified`',
    )


class ImClient(BaseModel):
    formattedProtocol: Optional[str] = Field(
        None,
        description="Output only. The protocol of the IM client formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the IM client translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the IM client.'
    )
    protocol: Optional[str] = Field(
        None,
        description='The protocol of the IM client. The protocol can be custom or one of these predefined values: * `aim` * `msn` * `yahoo` * `skype` * `qq` * `googleTalk` * `icq` * `jabber` * `netMeeting`',
    )
    type: Optional[str] = Field(
        None,
        description='The type of the IM client. The type can be custom or one of these predefined values: * `home` * `work` * `other`',
    )
    username: Optional[str] = Field(
        None, description='The user name used in the IM client.'
    )


class Interest(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the interest.'
    )
    value: Optional[str] = Field(
        None, description='The interest; for example, `stargazing`.'
    )


class ListContactGroupsResponse(BaseModel):
    contactGroups: Optional[List[ContactGroup]] = Field(
        None,
        description='The list of contact groups. Members of the contact groups are not populated.',
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='The token that can be used to retrieve the next page of results.',
    )
    nextSyncToken: Optional[str] = Field(
        None,
        description='The token that can be used to retrieve changes since the last request.',
    )
    totalItems: Optional[int] = Field(
        None, description='The total number of items in the list without pagination.'
    )


class Locale(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the locale.'
    )
    value: Optional[str] = Field(
        None,
        description='The well-formed [IETF BCP 47](https://tools.ietf.org/html/bcp47) language tag representing the locale.',
    )


class Location(BaseModel):
    buildingId: Optional[str] = Field(None, description='The building identifier.')
    current: Optional[bool] = Field(
        None, description='Whether the location is the current location.'
    )
    deskCode: Optional[str] = Field(None, description='The individual desk location.')
    floor: Optional[str] = Field(None, description='The floor name or number.')
    floorSection: Optional[str] = Field(
        None, description='The floor section in `floor_name`.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the location.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the location. The type can be custom or one of these predefined values: * `desk` * `grewUp`',
    )
    value: Optional[str] = Field(
        None, description='The free-form value of the location.'
    )


class Membership(BaseModel):
    contactGroupMembership: Optional[ContactGroupMembership] = Field(
        None, description='The contact group membership.'
    )
    domainMembership: Optional[DomainMembership] = Field(
        None, description='Output only. The domain membership.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the membership.'
    )


class MiscKeyword(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the miscellaneous keyword translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the miscellaneous keyword.'
    )
    type: Optional[Type] = Field(None, description='The miscellaneous keyword type.')
    value: Optional[str] = Field(
        None, description='The value of the miscellaneous keyword.'
    )


class Name(BaseModel):
    displayName: Optional[str] = Field(
        None,
        description="Output only. The display name formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
    )
    displayNameLastFirst: Optional[str] = Field(
        None,
        description="Output only. The display name with the last name first formatted according to the locale specified by the viewer's account or the `Accept-Language` HTTP header.",
    )
    familyName: Optional[str] = Field(None, description='The family name.')
    givenName: Optional[str] = Field(None, description='The given name.')
    honorificPrefix: Optional[str] = Field(
        None, description='The honorific prefixes, such as `Mrs.` or `Dr.`'
    )
    honorificSuffix: Optional[str] = Field(
        None, description='The honorific suffixes, such as `Jr.`'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the name.'
    )
    middleName: Optional[str] = Field(None, description='The middle name(s).')
    phoneticFamilyName: Optional[str] = Field(
        None, description='The family name spelled as it sounds.'
    )
    phoneticFullName: Optional[str] = Field(
        None, description='The full name spelled as it sounds.'
    )
    phoneticGivenName: Optional[str] = Field(
        None, description='The given name spelled as it sounds.'
    )
    phoneticHonorificPrefix: Optional[str] = Field(
        None, description='The honorific prefixes spelled as they sound.'
    )
    phoneticHonorificSuffix: Optional[str] = Field(
        None, description='The honorific suffixes spelled as they sound.'
    )
    phoneticMiddleName: Optional[str] = Field(
        None, description='The middle name(s) spelled as they sound.'
    )
    unstructuredName: Optional[str] = Field(
        None, description='The free form name value.'
    )


class Nickname(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the nickname.'
    )
    type: Optional[Type1] = Field(None, description='The type of the nickname.')
    value: Optional[str] = Field(None, description='The nickname.')


class Occupation(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the occupation.'
    )
    value: Optional[str] = Field(
        None, description='The occupation; for example, `carpenter`.'
    )


class Organization(BaseModel):
    costCenter: Optional[str] = Field(
        None, description="The person's cost center at the organization."
    )
    current: Optional[bool] = Field(
        None,
        description="True if the organization is the person's current organization; false if the organization is a past organization.",
    )
    department: Optional[str] = Field(
        None, description="The person's department at the organization."
    )
    domain: Optional[str] = Field(
        None,
        description='The domain name associated with the organization; for example, `google.com`.',
    )
    endDate: Optional[Date] = Field(
        None, description='The end date when the person left the organization.'
    )
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the organization translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    fullTimeEquivalentMillipercent: Optional[int] = Field(
        None,
        description="The person's full-time equivalent millipercent within the organization (100000 = 100%).",
    )
    jobDescription: Optional[str] = Field(
        None, description="The person's job description at the organization."
    )
    location: Optional[str] = Field(
        None, description='The location of the organization office the person works at.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the organization.'
    )
    name: Optional[str] = Field(None, description='The name of the organization.')
    phoneticName: Optional[str] = Field(
        None, description='The phonetic name of the organization.'
    )
    startDate: Optional[Date] = Field(
        None, description='The start date when the person joined the organization.'
    )
    symbol: Optional[str] = Field(
        None,
        description='The symbol associated with the organization; for example, a stock ticker symbol, abbreviation, or acronym.',
    )
    title: Optional[str] = Field(
        None, description="The person's job title at the organization."
    )
    type: Optional[str] = Field(
        None,
        description='The type of the organization. The type can be custom or one of these predefined values: * `work` * `school`',
    )


class PersonMetadata(BaseModel):
    deleted: Optional[bool] = Field(
        None,
        description='Output only. True if the person resource has been deleted. Populated only for `people.connections.list` and `otherContacts.list` sync requests.',
    )
    linkedPeopleResourceNames: Optional[List[str]] = Field(
        None,
        description='Output only. Resource names of people linked to this resource.',
    )
    objectType: Optional[ObjectType] = Field(
        None,
        description='Output only. **DEPRECATED** (Please use `person.metadata.sources.profileMetadata.objectType` instead) The type of the person object.',
    )
    previousResourceNames: Optional[List[str]] = Field(
        None,
        description='Output only. Any former resource names this person has had. Populated only for `people.connections.list` requests that include a sync token. The resource name may change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or profile URL.',
    )
    sources: Optional[List[SourceModel]] = Field(
        None, description='The sources of data for the person.'
    )


class PhoneNumber(BaseModel):
    canonicalForm: Optional[str] = Field(
        None,
        description='Output only. The canonicalized [ITU-T E.164](https://law.resource.org/pub/us/cfr/ibr/004/itu-t.E.164.1.2008.pdf) form of the phone number.',
    )
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the phone number translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the phone number.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the phone number. The type can be custom or one of these predefined values: * `home` * `work` * `mobile` * `homeFax` * `workFax` * `otherFax` * `pager` * `workMobile` * `workPager` * `main` * `googleVoice` * `other`',
    )
    value: Optional[str] = Field(None, description='The phone number.')


class Photo(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the photo.'
    )
    url: Optional[str] = Field(
        None,
        description='The URL of the photo. You can change the desired size by appending a query parameter `sz={size}` at the end of the url, where {size} is the size in pixels. Example: https://lh3.googleusercontent.com/-T_wVWLlmg7w/AAAAAAAAAAI/AAAAAAAABa8/00gzXvDBYqw/s100/photo.jpg?sz=50',
    )


class Relation(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the relation translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the relation.'
    )
    person: Optional[str] = Field(
        None, description='The name of the other person this relation refers to.'
    )
    type: Optional[str] = Field(
        None,
        description="The person's relation to the other person. The type can be custom or one of these predefined values: * `spouse` * `child` * `mother` * `father` * `parent` * `brother` * `sister` * `friend` * `relative` * `domesticPartner` * `manager` * `assistant` * `referredBy` * `partner`",
    )


class RelationshipInterest(BaseModel):
    formattedValue: Optional[str] = Field(
        None,
        description="Output only. The value of the relationship interest translated and formatted in the viewer's account locale or the locale specified in the Accept-Language HTTP header.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the relationship interest.'
    )
    value: Optional[str] = Field(
        None,
        description='The kind of relationship the person is looking for. The value can be custom or one of these predefined values: * `friend` * `date` * `relationship` * `networking`',
    )


class RelationshipStatus(BaseModel):
    formattedValue: Optional[str] = Field(
        None,
        description="Output only. The value of the relationship status translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the relationship status.'
    )
    value: Optional[str] = Field(
        None,
        description='The relationship status. The value can be custom or one of these predefined values: * `single` * `inARelationship` * `engaged` * `married` * `itsComplicated` * `openRelationship` * `widowed` * `inDomesticPartnership` * `inCivilUnion`',
    )


class Residence(BaseModel):
    current: Optional[bool] = Field(
        None,
        description="True if the residence is the person's current residence; false if the residence is a past residence.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the residence.'
    )
    value: Optional[str] = Field(None, description='The address of the residence.')


class SipAddress(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the SIP address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the SIP address.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the SIP address. The type can be custom or or one of these predefined values: * `home` * `work` * `mobile` * `other`',
    )
    value: Optional[str] = Field(
        None,
        description='The SIP address in the [RFC 3261 19.1](https://tools.ietf.org/html/rfc3261#section-19.1) SIP URI format.',
    )


class Skill(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the skill.'
    )
    value: Optional[str] = Field(
        None, description='The skill; for example, `underwater basket weaving`.'
    )


class Tagline(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the tagline.'
    )
    value: Optional[str] = Field(None, description='The tagline.')


class UpdateContactGroupRequest(BaseModel):
    contactGroup: Optional[ContactGroup] = Field(
        None, description='Required. The contact group to update.'
    )
    readGroupFields: Optional[str] = Field(
        None,
        description='Optional. A field mask to restrict which fields on the group are returned. Defaults to `metadata`, `groupType`, and `name` if not set or set to empty. Valid fields are: * clientData * groupType * memberCount * metadata * name',
    )
    updateGroupFields: Optional[str] = Field(
        None,
        description='Optional. A field mask to restrict which fields on the group are updated. Multiple fields can be specified by separating them with commas. Defaults to `name` if not set or set to empty. Updated fields are replaced. Valid values are: * clientData * name',
    )


class Url(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the URL.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the URL. The type can be custom or one of these predefined values: * `home` * `work` * `blog` * `profile` * `homePage` * `ftp` * `reservations` * `appInstallPage`: website for a Currents application. * `other`',
    )
    value: Optional[str] = Field(None, description='The URL.')


class UserDefined(BaseModel):
    key: Optional[str] = Field(
        None, description='The end user specified key of the user defined data.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the user defined data.'
    )
    value: Optional[str] = Field(
        None, description='The end user specified value of the user defined data.'
    )


class Address(BaseModel):
    city: Optional[str] = Field(None, description='The city of the address.')
    country: Optional[str] = Field(None, description='The country of the address.')
    countryCode: Optional[str] = Field(
        None,
        description='The [ISO 3166-1 alpha-2](http://www.iso.org/iso/country_codes.htm) country code of the address.',
    )
    extendedAddress: Optional[str] = Field(
        None,
        description='The extended address of the address; for example, the apartment number.',
    )
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    formattedValue: Optional[str] = Field(
        None,
        description='The unstructured value of the address. If this is not set by the user it will be automatically constructed from structured values.',
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the address.'
    )
    poBox: Optional[str] = Field(None, description='The P.O. box of the address.')
    postalCode: Optional[str] = Field(
        None, description='The postal code of the address.'
    )
    region: Optional[str] = Field(
        None,
        description='The region of the address; for example, the state or province.',
    )
    streetAddress: Optional[str] = Field(None, description='The street address.')
    type: Optional[str] = Field(
        None,
        description='The type of the address. The type can be custom or one of these predefined values: * `home` * `work` * `other`',
    )


class AgeRangeType(BaseModel):
    ageRange: Optional[AgeRange] = Field(None, description='The age range.')
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the age range.'
    )


class BatchGetContactGroupsResponse(BaseModel):
    responses: Optional[List[ContactGroupResponse]] = Field(
        None,
        description='The list of responses for each requested contact group resource.',
    )


class Biography(BaseModel):
    contentType: Optional[ContentType] = Field(
        None, description='The content type of the biography.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the biography.'
    )
    value: Optional[str] = Field(None, description='The short biography.')


class Birthday(BaseModel):
    date: Optional[Date] = Field(
        None, description='The structured date of the birthday.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the birthday.'
    )
    text: Optional[str] = Field(
        None,
        description="Prefer to use the `date` field if set. A free-form string representing the user's birthday. This value is not validated.",
    )


class BraggingRights(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the bragging rights.'
    )
    value: Optional[str] = Field(
        None, description='The bragging rights; for example, `climbed mount everest`.'
    )


class CalendarUrl(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the calendar URL translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the calendar URL.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the calendar URL. The type can be custom or one of these predefined values: * `home` * `freeBusy` * `work`',
    )
    url: Optional[str] = Field(None, description='The calendar URL.')


class ClientData(BaseModel):
    key: Optional[str] = Field(
        None, description='The client specified key of the client data.'
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the client data.'
    )
    value: Optional[str] = Field(
        None, description='The client specified value of the client data.'
    )


class CoverPhoto(BaseModel):
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the cover photo.'
    )
    url: Optional[str] = Field(None, description='The URL of the cover photo.')


class EmailAddress(BaseModel):
    displayName: Optional[str] = Field(
        None, description='The display name of the email.'
    )
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the email address translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the email address.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the email address. The type can be custom or one of these predefined values: * `home` * `work` * `other`',
    )
    value: Optional[str] = Field(None, description='The email address.')


class Event(BaseModel):
    date: Optional[Date] = Field(None, description='The date of the event.')
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the event.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the event. The type can be custom or one of these predefined values: * `anniversary` * `other`',
    )


class ExternalId(BaseModel):
    formattedType: Optional[str] = Field(
        None,
        description="Output only. The type of the event translated and formatted in the viewer's account locale or the `Accept-Language` HTTP header locale.",
    )
    metadata: Optional[FieldMetadata] = Field(
        None, description='Metadata about the external ID.'
    )
    type: Optional[str] = Field(
        None,
        description='The type of the external ID. The type can be custom or one of these predefined values: * `account` * `customer` * `loginId` * `network` * `organization`',
    )
    value: Optional[str] = Field(None, description='The value of the external ID.')


class Person(BaseModel):
    addresses: Optional[List[Address]] = Field(
        None, description="The person's street addresses."
    )
    ageRange: Optional[AgeRange] = Field(
        None,
        description="Output only. **DEPRECATED** (Please use `person.ageRanges` instead) The person's age range.",
    )
    ageRanges: Optional[List[AgeRangeType]] = Field(
        None, description="Output only. The person's age ranges."
    )
    biographies: Optional[List[Biography]] = Field(
        None,
        description="The person's biographies. This field is a singleton for contact sources.",
    )
    birthdays: Optional[List[Birthday]] = Field(
        None,
        description="The person's birthdays. This field is a singleton for contact sources.",
    )
    braggingRights: Optional[List[BraggingRights]] = Field(
        None,
        description="**DEPRECATED**: No data will be returned The person's bragging rights.",
    )
    calendarUrls: Optional[List[CalendarUrl]] = Field(
        None, description="The person's calendar URLs."
    )
    clientData: Optional[List[ClientData]] = Field(
        None, description="The person's client data."
    )
    coverPhotos: Optional[List[CoverPhoto]] = Field(
        None, description="Output only. The person's cover photos."
    )
    emailAddresses: Optional[List[EmailAddress]] = Field(
        None,
        description="The person's email addresses. For `people.connections.list` and `otherContacts.list` the number of email addresses is limited to 100. If a Person has more email addresses the entire set can be obtained by calling GetPeople.",
    )
    etag: Optional[str] = Field(
        None,
        description='The [HTTP entity tag](https://en.wikipedia.org/wiki/HTTP_ETag) of the resource. Used for web cache validation.',
    )
    events: Optional[List[Event]] = Field(None, description="The person's events.")
    externalIds: Optional[List[ExternalId]] = Field(
        None, description="The person's external IDs."
    )
    fileAses: Optional[List[FileAs]] = Field(
        None, description="The person's file-ases."
    )
    genders: Optional[List[Gender]] = Field(
        None,
        description="The person's genders. This field is a singleton for contact sources.",
    )
    imClients: Optional[List[ImClient]] = Field(
        None, description="The person's instant messaging clients."
    )
    interests: Optional[List[Interest]] = Field(
        None, description="The person's interests."
    )
    locales: Optional[List[Locale]] = Field(
        None, description="The person's locale preferences."
    )
    locations: Optional[List[Location]] = Field(
        None, description="The person's locations."
    )
    memberships: Optional[List[Membership]] = Field(
        None, description="The person's group memberships."
    )
    metadata: Optional[PersonMetadata] = Field(
        None, description='Output only. Metadata about the person.'
    )
    miscKeywords: Optional[List[MiscKeyword]] = Field(
        None, description="The person's miscellaneous keywords."
    )
    names: Optional[List[Name]] = Field(
        None,
        description="The person's names. This field is a singleton for contact sources.",
    )
    nicknames: Optional[List[Nickname]] = Field(
        None, description="The person's nicknames."
    )
    occupations: Optional[List[Occupation]] = Field(
        None, description="The person's occupations."
    )
    organizations: Optional[List[Organization]] = Field(
        None, description="The person's past or current organizations."
    )
    phoneNumbers: Optional[List[PhoneNumber]] = Field(
        None,
        description="The person's phone numbers. For `people.connections.list` and `otherContacts.list` the number of phone numbers is limited to 100. If a Person has more phone numbers the entire set can be obtained by calling GetPeople.",
    )
    photos: Optional[List[Photo]] = Field(
        None, description="Output only. The person's photos."
    )
    relations: Optional[List[Relation]] = Field(
        None, description="The person's relations."
    )
    relationshipInterests: Optional[List[RelationshipInterest]] = Field(
        None,
        description="Output only. **DEPRECATED**: No data will be returned The person's relationship interests.",
    )
    relationshipStatuses: Optional[List[RelationshipStatus]] = Field(
        None,
        description="Output only. **DEPRECATED**: No data will be returned The person's relationship statuses.",
    )
    residences: Optional[List[Residence]] = Field(
        None,
        description="**DEPRECATED**: (Please use `person.locations` instead) The person's residences.",
    )
    resourceName: Optional[str] = Field(
        None,
        description='The resource name for the person, assigned by the server. An ASCII string in the form of `people/{person_id}`.',
    )
    sipAddresses: Optional[List[SipAddress]] = Field(
        None, description="The person's SIP addresses."
    )
    skills: Optional[List[Skill]] = Field(None, description="The person's skills.")
    taglines: Optional[List[Tagline]] = Field(
        None,
        description="Output only. **DEPRECATED**: No data will be returned The person's taglines.",
    )
    urls: Optional[List[Url]] = Field(None, description="The person's associated URLs.")
    userDefined: Optional[List[UserDefined]] = Field(
        None, description="The person's user defined data."
    )


class PersonResponse(BaseModel):
    httpStatusCode: Optional[int] = Field(
        None,
        description='**DEPRECATED** (Please use status instead) [HTTP 1.1 status code] (http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html).',
    )
    person: Optional[Person] = Field(None, description='The person.')
    requestedResourceName: Optional[str] = Field(
        None,
        description='The original requested resource name. May be different than the resource name on the returned person. The resource name can change when adding or removing fields that link a contact and profile such as a verified email, verified phone number, or a profile URL.',
    )
    status: Optional[Status] = Field(None, description='The status of the response.')


class SearchDirectoryPeopleResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    people: Optional[List[Person]] = Field(
        None,
        description='The list of people in the domain directory that match the query.',
    )
    totalSize: Optional[int] = Field(
        None, description='The total number of items in the list without pagination.'
    )


class SearchResult(BaseModel):
    person: Optional[Person] = Field(None, description='The matched Person.')


class UpdateContactPhotoResponse(BaseModel):
    person: Optional[Person] = Field(
        None,
        description='The updated person, if person_fields is set in the UpdateContactPhotoRequest; otherwise this will be unset.',
    )


class BatchCreateContactsResponse(BaseModel):
    createdPeople: Optional[List[PersonResponse]] = Field(
        None,
        description='The contacts that were created, unless the request `read_mask` is empty.',
    )


class BatchUpdateContactsRequest(BaseModel):
    contacts: Optional[Dict[str, Person]] = Field(
        None,
        description='Required. A map of resource names to the person data to be updated. Allows up to 200 contacts in a single request.',
    )
    readMask: Optional[str] = Field(
        None,
        description='Required. A field mask to restrict which fields on each person are returned. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined',
    )
    sources: Optional[List[Source]] = Field(
        None,
        description='Optional. A mask of what source types to return. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.',
    )
    updateMask: Optional[str] = Field(
        None,
        description='Required. A field mask to restrict which fields on the person are updated. Multiple fields can be specified by separating them with commas. All specified fields will be replaced, or cleared if left empty for each person. Valid values are: * addresses * biographies * birthdays * calendarUrls * clientData * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * relations * sipAddresses * urls * userDefined',
    )


class BatchUpdateContactsResponse(BaseModel):
    updateResult: Optional[Dict[str, PersonResponse]] = Field(
        None,
        description='A map of resource names to the contacts that were updated, unless the request `read_mask` is empty.',
    )


class ContactToCreate(BaseModel):
    contactPerson: Optional[Person] = Field(
        None,
        description='Required. The person data to populate a newly created source.',
    )


class DeleteContactPhotoResponse(BaseModel):
    person: Optional[Person] = Field(
        None,
        description='The updated person, if person_fields is set in the DeleteContactPhotoRequest; otherwise this will be unset.',
    )


class GetPeopleResponse(BaseModel):
    responses: Optional[List[PersonResponse]] = Field(
        None, description='The response for each requested resource name.'
    )


class ListConnectionsResponse(BaseModel):
    connections: Optional[List[Person]] = Field(
        None, description='The list of people that the requestor is connected to.'
    )
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    nextSyncToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token. When the response is paginated, only the last page will contain `nextSyncToken`.',
    )
    totalItems: Optional[int] = Field(
        None, description='The total number of items in the list without pagination.'
    )
    totalPeople: Optional[int] = Field(
        None,
        description='**DEPRECATED** (Please use totalItems) The total number of people in the list without pagination.',
    )


class ListDirectoryPeopleResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    nextSyncToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.',
    )
    people: Optional[List[Person]] = Field(
        None, description='The list of people in the domain directory.'
    )


class ListOtherContactsResponse(BaseModel):
    nextPageToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `page_token` to retrieve the next page. If this field is omitted, there are no subsequent pages.',
    )
    nextSyncToken: Optional[str] = Field(
        None,
        description='A token, which can be sent as `sync_token` to retrieve changes since the last request. Request must set `request_sync_token` to return the sync token.',
    )
    otherContacts: Optional[List[Person]] = Field(
        None,
        description='The list of "Other contacts" returned as Person resources. "Other contacts" support a limited subset of fields. See ListOtherContactsRequest.request_mask for more detailed information.',
    )
    totalSize: Optional[int] = Field(
        None,
        description='The total number of other contacts in the list without pagination.',
    )


class SearchResponse(BaseModel):
    results: Optional[List[SearchResult]] = Field(
        None, description='The results of the request.'
    )


class BatchCreateContactsRequest(BaseModel):
    contacts: Optional[List[ContactToCreate]] = Field(
        None,
        description='Required. The contact to create. Allows up to 200 contacts in a single request.',
    )
    readMask: Optional[str] = Field(
        None,
        description='Required. A field mask to restrict which fields on each person are returned in the response. Multiple fields can be specified by separating them with commas. If read mask is left empty, the post-mutate-get is skipped and no data will be returned in the response. Valid values are: * addresses * ageRanges * biographies * birthdays * calendarUrls * clientData * coverPhotos * emailAddresses * events * externalIds * genders * imClients * interests * locales * locations * memberships * metadata * miscKeywords * names * nicknames * occupations * organizations * phoneNumbers * photos * relations * sipAddresses * skills * urls * userDefined',
    )
    sources: Optional[List[Source]] = Field(
        None,
        description='Optional. A mask of what source types to return in the post mutate read. Defaults to READ_SOURCE_TYPE_CONTACT and READ_SOURCE_TYPE_PROFILE if not set.',
    )
